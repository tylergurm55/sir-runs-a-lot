const kTouchStartEventName = 'touchstart'; const kTouchMoveEventName = 'touchmove'; const kTouchEndEventName = 'touchend'; const kTouchCancelEventName = 'touchcancel'; const kGestureStartEventName = 'gesturestart'; const kGestureEndEventName = 'gestureend'; const kSwipeEvent = 'TouchController:SwipeEvent'; const kTapEvent = 'TouchController:TapeEvent'; const TouchController = Class.create({
  initialize() { document.observe(kTouchStartEventName, this.handleTouchStartEvent.bind(this)); document.observe(kTouchMoveEventName, this.handleTouchMoveEvent.bind(this)); document.observe(kTouchEndEventName, this.handleTouchEndEvent.bind(this)); document.observe(kTouchCancelEventName, this.handleTouchCancelEvent.bind(this)); document.observe(kGestureStartEventName, this.handleGestureStartEvent.bind(this)); document.observe(kGestureEndEventName, this.handleGestureEndEvent.bind(this)); this.swipeInProgress = false; this.swipeFingerCount = 0; this.swipeStartTime = 0; this.swipeStartX = 0; this.swipeStartY = 0; this.preventDefault = true; this.tapEventCallback = null; this.setTrackArea(0, 0, 0, 0); this.enableTouchTracking = true; }, setTouchTrackingEnabled(a) { this.enableTouchTracking = a; }, setTrackArea(d, c, b, a) { debugMessage(kDebugTouchController_SetTrackArea, `left: ${d} top: ${c} width: ${b} height: ${a}`); this.trackAreaLeft = d; this.trackAreaTop = c; this.trackAreaRight = d + b; this.trackAreaBottom = c + a; }, registerTapEventCallback(a) { this.tapEventCallback = a; }, isTouchWithinTrackArea(a) { debugMessage(kDebugTouchController_IsTouchWithinTrackArea, 'checking...'); if (this.enableTouchTracking === false) { debugMessage(kDebugTouchController_IsTouchWithinTrackArea, '- nope, tracking is disabled'); return false; } if (a.clientX < this.trackAreaLeft) { debugMessage(kDebugTouchController_IsTouchWithinTrackArea, '- nope, x < left'); return false; } if (a.clientX > this.trackAreaRight) { debugMessage(kDebugTouchController_IsTouchWithinTrackArea, '- nope, x > right'); return false; } if (a.clientY < this.trackAreaTop) { debugMessage(kDebugTouchController_IsTouchWithinTrackArea, '- nope, y < top'); return false; } if (a.clientY > this.trackAreaBottom) { debugMessage(kDebugTouchController_IsTouchWithinTrackArea, '- nope, y > bottom'); return false; }debugMessage(kDebugTouchController_IsTouchWithinTrackArea, '- yes it is!'); return true; }, handleTouchStartEvent(b) { debugMessage(kDebugTouchController_HandleTouchStartEvent, `touch event has ${b.touches.length} fingers...`); if (this.swipeInProgress === false) { debugMessage(kDebugTouchController_HandleTouchStartEvent, '- this is the first finger down event...'); const a = b.touches[0]; if (this.isTouchWithinTrackArea(a)) { debugMessage(kDebugTouchController_HandleTouchStartEvent, '- start tracking a swipt event...'); if (this.preventDefault) { b.preventDefault(); } this.swipeInProgress = true; this.swipeFingerCount = b.touches.length; this.swipeStartTime = new Date(); this.swipeStartX = a.clientX; this.swipeStartY = a.clientY; } else { debugMessage(kDebugTouchController_HandleTouchStartEvent, '- but it is outside of the track area'); } } else { debugMessage(kDebugTouchController_HandleTouchStartEvent, '- this is a subsequent finger down event. update finger count...'); if (b.touches.length > this.swipeFingerCount) { this.swipeFingerCount = b.touches.length; debugMessage(kDebugTouchController_HandleTouchStartEvent, `- this.swipeFingerCount:${this.swipeFingerCount}`); } } }, handleTouchMoveEvent(a) { if (this.preventDefault) { a.preventDefault(); }debugMessage(kDebugTouchController_HandleTouchCancelEvent, ''); }, handleTouchEndEvent(a) { debugMessage(kDebugTouchController_HandleTouchEndEvent, `touch event has ${a.touches.length} fingers...`); if (this.swipeInProgress) { if (this.preventDefault) { a.preventDefault(); } if (a.touches.length === 0) { debugMessage(kDebugTouchController_HandleTouchEndEvent, `-  ${this.swipeFingerCount} finger swipe is complete.`); const h = a.changedTouches[0]; const m = document.viewport.getDimensions(); const e = m.width / 3; const d = m.height / 3; const g = m.width / 3; const k = h.clientX - this.swipeStartX; const i = h.clientY - this.swipeStartY; const c = Math.abs(k); const b = Math.abs(i); const o = new Date(); const q = o - this.swipeStartTime; let l = false; let p = false; const f = 400; const j = 20; if (q < f) { debugMessage(kDebugTouchController_HandleTouchEndEvent, '-  elapsed time was short enough to be a tap, check its magnitude...'); if ((c < j) && (b < j)) { l = true; } else { debugMessage(kDebugTouchController_HandleTouchEndEvent, "-  magnitude time too big to be a tap, check if it's a swipe..."); } } else { debugMessage(kDebugTouchController_HandleTouchEndEvent, "-  elapsed time too long to be a tap, check if it's a swipe..."); } if (q > 800) { debugMessage(kDebugTouchController_HandleTouchEndEvent, '-  elapsed time too long to be a swipe, ignoring...'); } else if (c > b) { if (b > d) { debugMessage(kDebugTouchController_HandleTouchEndEvent, '-  vertical magnitude too high, ignoring...'); } else { p = true; } } else if (c > g) { debugMessage(kDebugTouchController_HandleTouchEndEvent, '-  horizontal magnitude too high, ignoring...'); } else { p = true; } if (l) { debugMessage(kDebugTouchController_HandleTouchEndEvent, `-  it's a ${this.swipeFingerCount} finger tap`); if (this.tapEventCallback) { var a = {}; a.memo = {}; a.memo.fingers = this.swipeFingerCount; a.memo.pointX = h.clientX; a.memo.pointY = h.clientY; debugMessage(kDebugTouchController_HandleTouchEndEvent, `- invoking callback with pointX: ${h.clientX} pointY: ${h.clientY}...`); this.tapEventCallback(a); debugMessage(kDebugTouchController_HandleTouchEndEvent, '- back from callback'); } else { debugMessage(kDebugTouchController_HandleTouchEndEvent, '- firing TapEvent...'); document.fire(kTapEvent, { fingers: this.swipeFingerCount, pointX: h.clientX, pointY: h.clientY }); } } else if (p) { let n; if (c > b) { n = (k < 0 ? 'left' : 'right'); } else { n = (i < 0 ? 'up' : 'down'); }debugMessage(kDebugTouchController_HandleTouchEndEvent, `-  it's a ${this.swipeFingerCount} finger swipe in the ${n} direction`); document.fire(kSwipeEvent, { direction: n, fingers: this.swipeFingerCount }); } this.swipeInProgress = false; this.swipeFingerCount = 0; } } else { debugMessage(kDebugTouchController_HandleTouchEndEvent, '-  false alarm. swipe has already ended.'); } }, handleTouchCancelEvent(a) { debugMessage(kDebugTouchController_HandleTouchCancelEvent, ''); this.swipeInProgress = false; }, handleGestureStartEvent(a) { debugMessage(kDebugTouchController_HandleGestureStartEvent, ''); if (this.preventDefault) { a.preventDefault(); } }, handleGestureEndEvent(a) { debugMessage(kDebugTouchController_HandleGestureEndEvent, ''); if (this.preventDefault) { a.preventDefault(); } },
});
