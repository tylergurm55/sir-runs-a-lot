const TSDGLFrameBuffer = Class.create({
  initialize(c, b, a) { this.gl = c; this.size = b; this.textureCount = a; this.currentTextureIndex = 0; this.setupFramebuffer(c, b, a); }, setupFramebuffer(g, e, c) { const b = this.buffer = g.createFramebuffer(); g.bindFramebuffer(g.FRAMEBUFFER, b); const a = this.textures = []; for (let d = 0; d < c; d++) { const f = g.createTexture(); g.bindTexture(g.TEXTURE_2D, f); g.pixelStorei(g.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true); g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL, false); g.texParameteri(g.TEXTURE_2D, g.TEXTURE_WRAP_S, g.CLAMP_TO_EDGE); g.texParameteri(g.TEXTURE_2D, g.TEXTURE_WRAP_T, g.CLAMP_TO_EDGE); g.texParameteri(g.TEXTURE_2D, g.TEXTURE_MIN_FILTER, g.LINEAR); g.texParameteri(g.TEXTURE_2D, g.TEXTURE_MAG_FILTER, g.LINEAR); g.texImage2D(g.TEXTURE_2D, 0, g.RGBA, e.width, e.height, 0, g.RGBA, g.UNSIGNED_BYTE, null); g.bindTexture(g.TEXTURE_2D, null); a.push(f); }g.framebufferTexture2D(g.FRAMEBUFFER, g.COLOR_ATTACHMENT0, g.TEXTURE_2D, a[this.currentTextureIndex], 0); g.bindFramebuffer(g.FRAMEBUFFER, null); }, currentGLTexture() { const a = this.textures[this.currentTextureIndex]; return a; }, setCurrentTextureToNext() { const b = this.textureCount; if (this.textureCount > 0) { const a = this.currentTextureIndex; const c = (a + 1) % b; this.currentTextureIndex = c; this.bindFramebuffer(); } }, bindFramebuffer() { const a = this.gl; a.bindFramebuffer(a.FRAMEBUFFER, this.buffer); a.framebufferTexture2D(a.FRAMEBUFFER, a.COLOR_ATTACHMENT0, a.TEXTURE_2D, this.textures[this.currentTextureIndex], 0); }, currentGLFramebuffer() { const b = this.gl; const a = b.getParameter(b.FRAMEBUFFER_BINDING); return a; }, unbindFramebufferAndBindGLFramebuffer(a) { const b = this.gl; b.bindFramebuffer(b.FRAMEBUFFER, a); },
}); TSDGLFrameBuffer.currentGLFramebuffer = function (b) { const a = b.getParameter(b.FRAMEBUFFER_BINDING); return a; };
