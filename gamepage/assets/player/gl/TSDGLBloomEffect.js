const kShaderUniformBloomAmount = 'BloomAmount'; const kShaderUniformBlurTexture = 'BlurTexture'; const TSDGLBloomEffect = Class.create({
  initialize(a) { this.gl = a; }, initWithEffectSize(a, b) { this._effectSize = a; this._blurBufferSize = CGSizeMake(Math.max(16, Math.ceil(a.width / b)), Math.max(16, Math.ceil(a.height / b))); this.p_setupShaders(); this.p_setupBuffers(); }, p_setupShaders() { const f = this.gl; const e = this._blurBufferSize; const b = WebGraphics.makePoint(1 / e.width, 1 / e.height); const c = WebGraphics.makeOrthoMatrix4(0, e.width, 0, e.height, -1, +1); const a = this._blurHorizontalShader = new TSDGLShader(f); a.initWithDefaultHorizontalBlurShader(); a.setMat4WithTransform3D(c, kTSDGLShaderUniformMVPMatrix); a.setPoint2D(b, kTSDGLShaderUniformTextureSize); const d = this._blurVerticalShader = new TSDGLShader(f); d.initWithDefaultVerticalBlurShader(); d.setMat4WithTransform3D(c, kTSDGLShaderUniformMVPMatrix); d.setPoint2D(b, kTSDGLShaderUniformTextureSize); const h = this._fboTransferShader = new TSDGLShader(f); h.initWithDefaultTextureShader(); h.setMat4WithTransform3D(c, kTSDGLShaderUniformMVPMatrix); const g = this._bloomShader = new TSDGLShader(f); g.initWithShaderFileNames('bloom', 'bloom'); g.setGLint(0, kTSDGLShaderUniformTexture); g.setGLint(1, kShaderUniformBlurTexture); }, p_setupBuffers() { const f = this.gl; const i = this._effectSize; const c = this._blurBufferSize; const h = CGSizeMake(2, 2); const e = CGRectMake(0, 0, i.width, i.height); const a = CGRectMake(0, 0, c.width, c.height); const d = this._dataBuffer = new TSDGLDataBuffer(f); d.initWithVertexRect(e, TSDRectUnit, h, false, false); const b = this._blurDataBuffer = new TSDGLDataBuffer(f); b.initWithVertexRect(a, CGRectZero, h, true, false); const g = this._blurTransferDataBuffer = new TSDGLDataBuffer(f); g.initWithVertexRect(a, TSDRectUnit, h, false, false); this._colorFramebuffer = new TSDGLFrameBuffer(f, i, 1); this._blurFramebuffer = new TSDGLFrameBuffer(f, c, 2); }, bindFramebuffer() { this._colorFramebuffer.bindFramebuffer(); }, unbindFramebufferAndBindGLFramebuffer(a) { this._colorFramebuffer.unbindFramebufferAndBindGLFramebuffer(a); }, p_blurColorBufferWithPreviousFramebuffer(a) { const e = this.gl; const c = this._blurFramebuffer; const b = this._blurBufferSize; c.bindFramebuffer(); e.clear(e.COLOR_BUFFER_BIT); e.viewport(0, 0, b.width, b.height); e.bindTexture(e.TEXTURE_2D, this._colorFramebuffer.currentGLTexture()); this._blurTransferDataBuffer.drawWithShader(this._fboTransferShader, true); let d = c.currentGLTexture(); c.setCurrentTextureToNext(); e.clear(e.COLOR_BUFFER_BIT); e.bindTexture(e.TEXTURE_2D, d); this._blurDataBuffer.drawWithShader(this._blurHorizontalShader, true); e.bindTexture(e.TEXTURE_2D, null); d = c.currentGLTexture(); c.setCurrentTextureToNext(); e.clear(e.COLOR_BUFFER_BIT); e.bindTexture(e.TEXTURE_2D, d); this._blurDataBuffer.drawWithShader(this._blurVerticalShader, true); c.unbindFramebufferAndBindGLFramebuffer(a); e.bindTexture(e.TEXTURE_2D, null); }, drawBloomEffectWithMVPMatrix(g, a, b) { const d = this.gl; const f = this._effectSize; const c = d.getParameter(d.VIEWPORT); this.p_blurColorBufferWithPreviousFramebuffer(b); d.viewport(0, 0, f.width, f.height); d.activeTexture(d.TEXTURE1); d.bindTexture(d.TEXTURE_2D, this._blurFramebuffer.currentGLTexture()); d.activeTexture(d.TEXTURE0); d.bindTexture(d.TEXTURE_2D, this._colorFramebuffer.currentGLTexture()); const e = this._bloomShader; e.setMat4WithTransform3D(g, kTSDGLShaderUniformMVPMatrix); e.setGLFloat(a, kShaderUniformBloomAmount); this._dataBuffer.drawWithShader(e, true); d.activeTexture(d.TEXTURE1); d.bindTexture(d.TEXTURE_2D, null); d.activeTexture(d.TEXTURE0); d.bindTexture(d.TEXTURE_2D, null); d.viewport(c[0], c[1], c[2], c[3]); },
});
