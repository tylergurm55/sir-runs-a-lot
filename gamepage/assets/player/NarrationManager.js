const NarrationManager = Class.create({
  initialize(b) { this.movieSegments = b.movieSegments; this.duration = b.duration; this.eventTracks = b.eventTracks; this.currentNavigationEventIndex = 0; this.lastSceneIndex = 0; for (let c = 0, d = this.eventTracks.length; c < d; c++) { const a = this.eventTracks[c]; if (a.type === 'navigation') { this.navigationEvents = a.events; } else if (a.type === 'movie') { this.movieEvents = a.events; } else if (a.type === 'pause') { this.pauseEvents = a.events; } } }, start() { const a = new Audio(); a.src = `../${this.movieSegments[0].url}`; Event.observe(a, 'playing', this.handleAudioDidStart.bind(this)); Event.observe(a, 'ended', this.handleAudioDidEnd.bind(this, 0)); a.play(); }, handleAudioDidStart() { setTimeout(this.navigate(this.navigationEvents[0], true), 100); }, handleAudioDidEnd(b) { const a = b + 1; if (this.movieSegments[a]) { const c = new Audio(); c.src = `../${this.movieSegments[a].url}`; c.play(); Event.stopObserving(c, 'ended'); Event.observe(c, 'ended', this.handleAudioDidEnd.bind(this, a)); } }, navigate(a, h) { const l = this.sceneIndexFromNavigationEvent(a); if (a.animationPhase === 'start') { let e = false; if (gShowController.script.loopSlideshow) { if (this.lastSceneIndex === gShowController.script.numScenes - 1) { if (l === 0) { e = true; } } } else if (this.lastSceneIndex + 1 === l) { e = true; } if (e) { if (gShowController.state === kShowControllerState_IdleAtInitialState) { gShowController.playCurrentScene(); } else if (gShowController.state === kShowControllerState_IdleAtFinalState) { gShowController.jumpToScene(this.lastSceneIndex, true); } } else { const k = gShowController.scriptManager.slideIndexFromSceneIndex(l); const g = this.lastSceneIndex; const j = gShowController.script.events[g].hyperlinks; let m; let f; for (let d = 0, b = j.length; d < b; d++) { m = j[d]; f = m.events[a.slide]; if (f) { break; } } if (m) { gShowController.jumpToHyperlinkSlide(k, m); } else { gShowController.jumpToScene(l, false); } } } else if (a.animationPhase === 'none' && h == null) { gShowController.jumpToScene(l, false); } const n = this.navigationEvents[this.currentNavigationEventIndex + 1]; if (n == null) { return; } const c = n.startTime - a.startTime; setTimeout(this.navigate.bind(this, n), c * 1000); this.lastSceneIndex = l; this.currentNavigationEventIndex = this.currentNavigationEventIndex + 1; }, handleCurrentSceneDidComplete(a) { gShowController.jumpToScene(a, false); }, sceneIndexFromNavigationEvent(e) { const c = e.slide; const f = gShowController.script.slideList; let b = -1; for (let a = 0, d = f.length; a < d; a++) { if (f[a] === c) { b = a; break; } } const h = gShowController.scriptManager.sceneIndexFromSlideIndex(b); const g = e.eventIndex + h; return g; }, slideIndexFromSlideId(b) { const d = gShowController.slideList; let e = -1; for (let a = 0, c = d.length; a < c; a++) { if (d[a] === b) { e = a; break; } } return e; },
});
