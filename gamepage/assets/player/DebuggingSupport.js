const gDebug = false; const gDebugOnMobile = false; let gNumDebugMessagesSent = 0; let gNumDebugMessagesQueued = 0; const gDebugMessageQueue = new Array(); const gDebugMessageRequest = null; let gDebugLastClassName = ''; let gDebugLastMethodName = ''; const gDebugSimulateSlowTextureDownload = false; const gDebugSimulateTextureLoadFailure = false; const gDebugSimulateScriptDownloadFailure = false; const kDebugFunction = 'function'; const kDebugSurpressMessage = '!NoOp_!NoOp'; const kDebugSetupShowController = `${kDebugFunction}_setupShowController`; const kDebugShowController = '!ShowController'; const kDebugShowController_AdvanceToNextBuild = `${kDebugShowController}_!advanceToNextBuild`; const kDebugShowController_AdvanceToNextSlide = `${kDebugShowController}_!advanceToNextSlide`; const kDebugShowController_DoIdleProcessing = `${kDebugShowController}_!doIdleProcessing`; const kDebugShowController_GoBackToPreviousBuild = `${kDebugShowController}_!goBackToPreviousBuild`; const kDebugShowController_GoBackToPreviousSlide = `${kDebugShowController}_!goBackToPreviousSlide`; const kDebugShowController_HandleScriptDidDownloadEvent = `${kDebugShowController}_!handleScriptDidDownloadEvent`; const kDebugShowController_HandleScriptDidNotDownloadEvent = `${kDebugShowController}_!handleScriptDidNotDownloadEvent`; const kDebugShowController_JumpToScene = `${kDebugShowController}_!jumpToScene`; const kDebugShowController_OnKeyPress = `${kDebugShowController}_!onKeyPress`; const kDebugTouchController = '!TouchController'; const kDebugTouchController_HandleGestureEndEvent = `${kDebugTouchController}_!handleGestureEndEvent`; const kDebugTouchController_HandleGestureStartEvent = `${kDebugTouchController}_!handleGestureStartEvent`; var kDebugTouchController_HandleTouchCancelEvent = `${kDebugTouchController}_!handleTouchCancelEvent`; var kDebugTouchController_HandleTouchCancelEvent = `${kDebugTouchController}_!handleTouchMoveEvent`; const kDebugTouchController_HandleTouchEndEvent = `${kDebugTouchController}_!handleTouchEndEvent`; const kDebugTouchController_HandleTouchStartEvent = `${kDebugTouchController}_!handleTouchStartEvent`; const kDebugTouchController_Initialize = `${kDebugTouchController}_!initialize`; const kDebugTouchController_IsTouchWithinTrackArea = `${kDebugTouchController}_!isTouchWithinTrackArea`; const kDebugTouchController_SetTrackArea = `${kDebugTouchController}_!setTrackArea`; const kDebugScriptMangaer = '!ScriptManager'; const kDebugScriptMangaer_DownloadScript = `${kDebugScriptMangaer}_!downloadScript`; const kDebugTimer = 'DebugTimer'; const kDebugTimer_AdvanceToNextBuild = `${kDebugTimer}_!advanceToNextBuild`; const kDebugTimer_CreateAnimationsForScene = `${kDebugTimer}_!createAnimationsForScene`; const kDebugTimer_ApplyAnimationsForScene = `${kDebugTimer}_!applyAnimationsForScene`; const kDebugTimer_PreProcessSceneAnimations = `${kDebugTimer}_!preProcessSceneAnimations`; const kDebugTimer_AdvanceToNextBuild_to_ApplyAnimations = `${kDebugTimer}_!preProcessSceneAnimations_to_ApplyAnimations`; const kDebugTimer_JumpToScene = `${kDebugTimer}_!jumpToScene`; const kDebugTimer_DisplayScene = `${kDebugTimer}_!displayScene`; function debugWarning(a, b) { if (gDebug === false) { return; }debugSendMessage(a, `WARNING: ${b}`, true); } function debugMessageAlways(a, b) { debugSendMessage(a, b, true); } function debugMessage(a, b) { if (gDebug == false) { return; } if ((gDevice == kDeviceMobile) && (gDebugOnMobile == false)) { return; }debugSendMessage(a, b, false); } function debugSendMessage(b, g, a) { const e = b.indexOf('_'); let d = b.substring(0, e); let h = b.substring(e + 1); let f = false; if (d[0] == '!') { d = d.substring(1); f = true; } if (h[0] == '!') { h = h.substring(1); f = true; } if (h[0] == '+') { h = h.substring(1); a = true; } if ((f == true) && (a == false)) { return; } let c = ''; if (g == null) { g = ''; } if (g[0] != '-' || d != gDebugLastClassName || h != gDebugLastMethodName) { if (d == kDebugTimer) { c = `${b}: `; } else if (d == kDebugFunction) { c = `${h}() `; } else { c = `${d}.${h}() `; } } else { c = ''; }gDebugLastClassName = d; gDebugLastMethodName = h; if (gDevice == kDeviceMobile) { gNumDebugMessagesSent++; const i = escape(`${gNumDebugMessagesSent}: ${c}${g}`); gDebugMessageQueue[gNumDebugMessagesQueued] = i; gNumDebugMessagesQueued++; if (gNumDebugMessagesQueued == 1) { debugCheckMessageQueue(); } } else if (window.console) { window.console.log(c + g); } } function debugSendNextMessageInQueue() { const b = gDebugMessageQueue[0]; gNumDebugMessagesQueued--; gDebugMessageQueue.splice(0, 1); const a = `/debugMessage.rhtml?message="${b}"`; new Ajax.Request(a, { method: 'get', onSuccess(c) { debugMessageWasSent(c); }, onFailure(c) { debugMessageWasNotSent(c); } }); } function debugMessageWasSent(a) { debugCheckMessageQueue(); } function debugMessageWasNotSent(a) { debugCheckMessageQueue(); } function debugCheckMessageQueue() { if (gNumDebugMessagesQueued > 0) { setTimeout(debugSendNextMessageInQueue, 10); } } const DebugTimer = Class.create({ initialize(a) { const b = a.indexOf('_'); const c = a.substring(b + 1); if (c[0] != '!') { this.id = a; this.startTime = new Date(); debugMessageAlways(a, 'Start'); } else { this.startTime = null; } }, stop() { if (this.startTime != null) { const b = new Date(); const a = b - this.startTime; debugMessageAlways(this.id, `Stop - Elapsed Time: ${a}`); } } }); function debugStopTimer(a) { if (a) { a.stop(); } } let debugDomDumpLineNumber = 0; function debugDumpDomFrom(c, b) { const a = `${kDebugFunction}_debugDumpDomFrom`; debugDomDumpLineNumber = 0; debugMessageAlways(a, `------------------ S T A R T   O F   D O M   D U M P --- Context: ${b}`); debugRecursivelyDumpDomFrom(c, ''); debugMessageAlways(a, '------------------ E N D   O F   D O M   D U M P'); } function debugRecursivelyDumpDomFrom(d, g) { const e = `${kDebugFunction}_recursivelyDumpDomFrom`; const b = d.id; const a = d.nodeName.toLowerCase(); if (a == '#text') { return; }debugMessageAlways(e, `-${debugDomDumpLineNumber++}${g}<${a} id='${b}'>`); let c; for (c = 0; c < d.childNodes.length; c++) { const f = d.childNodes[c]; recursivelyDumpDomFrom(f, `${g}   `); } if (a == 'img') { return; }debugMessageAlways(e, `-${debugDomDumpLineNumber++}${g}</${a}>`); }
