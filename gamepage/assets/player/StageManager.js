const kStageIsReadyEvent = 'StageManager:StageIsReadyEvent'; const StageManager = Class.create({
  initialize(a, b) { this.textureManager = a; this.scriptManager = b; this.stage = document.getElementById('stage'); this.hyperlinkPlane = document.getElementById('hyperlinkPlane'); this.stageWidth = 0; this.stageHeight = 0; this.showWidth = 0; this.showHeight = 0; this.audioTrackOffset = 0; this.audioTrackIconSize = 0; document.observe(kShowSizeDidChangeEvent, this.handleShowSizeDidChangeEvent.bind(this)); document.observe(kStageSizeDidChangeEvent, this.handleStageSizeDidChangeEvent.bind(this)); }, removeTexture(a) { a.parentNode.removeChild(a); }, addHyperlink(b) { const a = document.createElement('div'); setElementProperty(a, 'pointer-events', 'all'); a.setAttribute('class', 'hyperlink'); a.style.left = `${b.x}px`; a.style.top = `${b.y}px`; a.style.width = `${b.width}px`; a.style.height = `${b.height}px`; this.hyperlinkPlane.appendChild(a); }, clearAllHyperlinks() { let a; while (this.hyperlinkPlane.childNodes.length > 0) { this.hyperlinkPlane.removeChild(this.hyperlinkPlane.firstChild); } this.audioTrackOffset = this.audioTrackSpacer; }, handleStageSizeDidChangeEvent(a) { this.stageWidth = a.memo.width; this.stageHeight = a.memo.height; this.adjustStageToFit(this.stage); this.adjustStageToFit(this.hyperlinkPlane); }, handleShowSizeDidChangeEvent(a) { this.showWidth = a.memo.width; this.showHeight = a.memo.height; this.adjustStageToFit(this.stage); this.adjustStageToFit(this.hyperlinkPlane); this.audioTrackIconSize = this.showHeight / 4; this.audioTrackSpacer = this.audioTrackIconSize / 4; this.audioTrackOffset = this.audioTrackSpacer; }, adjustStageToFit(b) { if ((this.showWidth != 0) && (this.stageWidth != 0)) { const d = this.stageHeight / this.showHeight; const f = this.stageWidth / this.showWidth; const a = `scaleX(${f}) scaleY(${d})`; const e = 20; const c = Math.tan(Math.PI / 180 * e / 2) * 15 * (this.showWidth > this.showHeight ? this.showHeight : this.showWidth); this.perspective = c; setElementProperty(b, kTransformOriginPropertyName, kTransformOriginCenterPropertyValue); setElementProperty(b, kTransformPropertyName, a); setElementProperty(b, kPerspectiveOriginPropertyName, kTransformOriginCenterPropertyValue); setElementProperty(b, kTransformStylePropertyName, kTransformStylePreserve3DPropertyValue); setElementPosition(b, (d - 1) * this.showHeight / 2, (f - 1) * this.showWidth / 2, this.showWidth, this.showHeight); document.fire(kStageIsReadyEvent, {}); } }, debugGetStageStatistics() { const a = { numTextures: 0, numPixels: 0, numDegraded: 0 }; this.debugRecursivelyWalkDomFrom(this.stage, a); return a; },
});
