const kDeviceUnknown = 'deviceUnknown'; const kDeviceDesktop = 'deviceDesktop'; const kDeviceMobile = 'deviceMobile'; const kModeUnknown = 'modeUnknown'; const kModeDesktop = 'modeDesktop'; const kModeMobile = 'modeMobile'; const kBrowserUnknown = 'browserUnknown'; const kBrowserDesktopSafari = 'browserDesktopSafari'; const kBrowserMobileSafari = 'browserMobileSafari'; const kOrientationUnknown = 'orientationUnknown'; const kOrientationLandscape = 'orientationLandscape'; const kOrientationPortrait = 'orientationPortrait'; const kShowModeNormal = 0; const kShowModeAutoplay = 1; const kShowModeHyperlinksOnly = 2; const kSoundTrackModePlayOnce = 0; const kSoundTrackModeLooping = 1; const kSoundTrackModeOff = 2; const kOpacityPropertyName = 'opacity'; const kVisibilityPropertyName = 'visibility'; const kZIndexPropertyName = 'z-index'; const kDisplayPropertyName = 'display'; const kDisplayBlockPropertyValue = 'block'; const kDisplayNonePropertyValue = 'none'; const kTransformOriginTopLeftPropertyValue = 'top left'; const kTransformOriginCenterPropertyValue = 'center'; const kTransformStylePreserve3DPropertyValue = 'preserve-3d'; const kTransformStyleFlatPropertyValue = 'flat'; const kPositionAbsolutePropertyValue = 'absolute'; const kPositionRelativePropertyValue = 'relative'; const kBackfaceVisibilityHiddenPropertyValue = 'hidden'; const kiPhoneDeviceWidth = 320; const kiPhoneDeviceHeight = 480; const kiPhoneLandscapeButtonBarHeight = 32; const kiPhonePortraitButtonBarHeight = 44; const kiPhoneUrlBarHeight = 60; const kiPhoneStatusBarHeight = 20; const kiPadDeviceWidth = 768; const kiPadDeviceHeight = 1024; const kiPadLandscapeButtonBarHeight = 32; const kiPadPortraitButtonBarHeight = 44; const kiPadUrlBarHeight = 0; const kiPadStatusBarHeight = 0; const kiPadAddressBarHeight = 30; const kiPadBookmarksBarHeight = 30; const kiPadMaxMoviesPerScene = 20; const kMaxSceneDownloadWaitTime = 60000; const kMaxScriptDownloadWaitTime = 60000; const kWaitingIndicatorFadeOutDuration = 2000; const kHideAddressBarDelay = 3000; const kSceneLoadPollInterval = 100; const kSceneLoadDisplaySpinnerTime = 3000; const kSceneLoadDisplaySpinnerPollCount = kSceneLoadDisplaySpinnerTime / kSceneLoadPollInterval; const kSceneLoadGiveUpTime = 60000; const kSceneLoadGiveUpPollCount = kSceneLoadGiveUpTime / kSceneLoadPollInterval; const kPropertyName_currentSlide = 'currentSlide'; const kKeyCode_Plus = 107; const kKeyCode_Minus = 109; const kKeyCode_Dot = 110; const kKeyCode_F11 = 122; const kKeyCode_F12 = 123; const kKeyCode_Hyphen = 189; const kKeyCode_Equal = 187; const kKeyCode_Period = 190; const kKeyCode_Slash = 191; const kKeyCode_Space = 32; const kKeyCode_Escape = 27; const kKeyCode_LeftArrow = 37; const kKeyCode_UpArrow = 38; const kKeyCode_RightArrow = 39; const kKeyCode_DownArrow = 40; const kKeyCode_OpenBracket = 219; const kKeyCode_CloseBracket = 221; const kKeyCode_Home = 36; const kKeyCode_End = 35; const kKeyCode_PageUp = 33; const kKeyCode_PageDown = 34; const kKeyCode_Return = 13; const kKeyCode_N = 78; const kKeyCode_P = 80; const kKeyCode_Q = 81; const kKeyCode_S = 83; const kKeyCode_Delete = 8; const kKeyCode_0 = 48; const kKeyCode_9 = 57; const kKeyCode_Numeric_0 = 96; const kKeyCode_Numeric_9 = 105; const kKeyModifier_Shift = 1000; const kKeyModifier_Ctrl = 2000; const kKeyModifier_Alt = 3000; const kKeyModifier_Meta = 4000; const kHelpPlacardMainTitle = CoreDocs.loc('Keyboard Shortcuts', 'Keyboard Shortcuts'); const kHelpPlacardNavigationTitle = CoreDocs.loc('Navigation', 'Navigation'); const kHelpPlacardOtherTitle = CoreDocs.loc('Other', 'Other'); const kHelpPlacardAdvanceToNextBuild = CoreDocs.loc('Advance to next build', 'Advance to next build'); const kHelpPlacardGoBackToPreviousBuild = CoreDocs.loc('Go back to previous build', 'Go back to previous build'); const kHelpPlacardAdvanceAndSkipBuild = CoreDocs.loc('Advance and skip build', 'Advance and skip build'); const kHelpPlacardAdvanceToNextSlide = CoreDocs.loc('Advance to next slide', 'Advance to next slide'); const kHelpPlacardGoBackToPreviousSlide = CoreDocs.loc('Go back to previous slide', 'Go back to previous slide'); const kHelpPlacardGoToFirstSlide = CoreDocs.loc('Go to first slide', 'Go to first slide'); const kHelpPlacardGoToLastSlide = CoreDocs.loc('Go to last slide', 'Go to last slide'); const kHelpPlacardQuitPresentationMode = CoreDocs.loc('Quit presentation mode', 'Quit presentation mode'); const kHelpPlacardGoToSpecificSlide = CoreDocs.loc('Go to specific slide', 'Go to specific slide'); const kHelpPlacardShowOrHideKeyboardShortcuts = CoreDocs.loc('Show or hide Keyboard Shortcuts', 'Show or hide Keyboard Shortcuts'); const kHelpPlacardShowOrHideTheCurrentSlideNumber = CoreDocs.loc('Show or hide the current slide number', 'Show or hide the current slide number'); const kUnableToReachiWorkTryAgain = CoreDocs.loc("Slide couldn't be displayed.\nDo you want to try again?", 'alert text to display when we timeout trying to download resources from iWork.com'); const kSlideLabel = CoreDocs.loc('Slide', "Prefix label for 'Slide I/N' display"); const kTapOrSwipeToAdvance = CoreDocs.loc('Tap or Swipe to advance', 'Help string for bottom of portrait mode on mobile device'); const kOSUnknown = 'unknown'; const kOSWindows = 'Windows'; const kOSMacOSX = 'Mac OS X'; const kOSiOS = 'iOS'; const gTheoreticalMaxPixelCount = 1024 * 1024 * 3; let gSafeMaxPixelCount = gTheoreticalMaxPixelCount * 0.9; let gShowController = null; let gDevice = kDeviceUnknown; let gBrowser = kBrowserUnknown; let gMode = kModeUnknown; let gIpad = false; let gOS = kOSUnknown; let browserPrefix; let browserVersion; const userAgentString = window.navigator.userAgent; const isMacOS = window.navigator.platform.indexOf('Mac') !== -1; let isChrome = false; let isEdge = false; let isIE = false; if (userAgentString.lastIndexOf('Edge/') > 0) { isEdge = true; browserPrefix = 'webkit'; browserVersion = 12; } else if (userAgentString.lastIndexOf('Trident/') > 0) { isIE = true; browserPrefix = 'ms'; const revisionStringIE = userAgentString.substring(userAgentString.lastIndexOf('rv'), userAgentString.lastIndexOf(')')); let revisionIE = []; if (revisionStringIE.lastIndexOf(':') > 0) { revisionIE = revisionStringIE.split(':'); browserVersion = parseFloat(revisionIE[1]); } else if (revisionStringIE.lastIndexOf(' ') > 0) { revisionIE = revisionStringIE.split(' '); browserVersion = parseFloat(revisionIE[1]); } else { browserVersion = 11; } } else if (Prototype.Browser.WebKit) { browserPrefix = 'webkit'; if (userAgentString.lastIndexOf('Chrome/') > 0) { isChrome = true; } } else if (Prototype.Browser.Gecko) { browserPrefix = 'moz'; } else if (Prototype.Browser.IE) { isIE = true; browserPrefix = 'ms'; browserVersion = parseFloat(navigator.appVersion.split('MSIE')[1]); } const kKeyframesPropertyName = `@-${browserPrefix}-keyframes`; const kAnimationNamePropertyName = `-${browserPrefix}-animation-name`; const kAnimationDurationPropertyName = `-${browserPrefix}-animation-duration`; const kAnimationDelayPropertyName = `-${browserPrefix}-animation-delay`; const kAnimationFillModePropertyName = `-${browserPrefix}-animation-fill-mode`; const kAnimationTimingFunctionPropertyName = `-${browserPrefix}-animation-timing-function`; const kAnimationIterationCountPropertyName = `-${browserPrefix}-animation-iteration-count`; const kTransformPropertyName = `-${browserPrefix}-transform`; const kTransformOriginPropertyName = `-${browserPrefix}-transform-origin`; const kTransformOriginZPropertyName = `-${browserPrefix}-transform-origin-z`; var kTransitionPropertyName = `-${browserPrefix}-transition-property`; const kTransitionDurationName = `-${browserPrefix}-transition-duration`; const kTransformStylePropertyName = `-${browserPrefix}-transform-style`; var kTransitionPropertyName = `-${browserPrefix}-transition`; const kTransitionEndEventName = `${browserPrefix}TransitionEnd`; const kAnimationEndEventName = `${browserPrefix}AnimationEnd`; const kPerspectivePropertyName = `-${browserPrefix}-perspective`; const kPerspectiveOriginPropertyName = `-${browserPrefix}-perspective-origin`; const kBackfaceVisibilityPropertyName = `-${browserPrefix}-backface-visibility`; const kBoxShadowPropertyName = `-${browserPrefix}-box-shadow`; const kBorderPropertyName = 'border'; const kBackgroundImagePropertyName = 'background-image'; const kEmphasisEffects = ['apple:action-pop', 'apple:action-pulse', 'apple:action-blink', 'apple:action-flip', 'apple:action-bounce', 'apple:action-jiggle']; const kActionBuildKeyAnimations = {
  'apple:action-opacity': ['opacity'], 'apple:action-motion-path': ['position'], 'apple:action-rotation': ['transform.rotation.z'], 'apple:action-scale': ['transform.scale.x', 'transform.scale.y', 'anchorPoint', 'contents', 'bounds'], 'apple:action-blink': ['opacity'], 'apple:action-bounce': ['anchorPoint', 'transform.scale.y', 'transform.translation.y', 'transform.scale.x'], 'apple:action-flip': ['transform.rotation.y', 'transform.scale.xy'], 'apple:action-jiggle': ['transform.rotation.z'], 'apple:action-pop': ['transform.scale.xy'], 'apple:action-pulse': ['transform.scale.xy'],
}; const kSupportedWebGLEffects = ['apple:wipe-iris', 'com.apple.iWork.Keynote.BUKAnvil', 'com.apple.iWork.Keynote.BUKTwist', 'com.apple.iWork.Keynote.BUKFlop', 'com.apple.iWork.Keynote.KLNColorPlanes', 'com.apple.iWork.Keynote.KLNFlame', 'com.apple.iWork.Keynote.KLNConfetti', 'com.apple.iWork.Keynote.KLNDiffuse', 'com.apple.iWork.Keynote.KNFireworks']; let useWebGL = true; const usePDF = true; const pdfScaleFactor = 1; const kFullscreenChangeEventName = `${browserPrefix}fullscreenchange`; window.addEventListener('load', setupShowController, false); function static_url(a) { return a; } function setupShowController() { const a = isMobileSafari(); if (a) { gBrowser = kBrowserMobileSafari; gDevice = kDeviceMobile; gMode = kModeMobile; gIpad = isiPad(); } else { gBrowser = kBrowserDesktopSafari; gDevice = kDeviceDesktop; gMode = kModeDesktop; }debugMessage(kDebugSetupShowController, '================================================================================'); debugMessage(kDebugSetupShowController, '===                     S T A R T   O F   S E S S I O N                      ==='); debugMessage(kDebugSetupShowController, '================================================================================'); debugMessage(kDebugSetupShowController, `userAgent: ${navigator.userAgent}`); debugMessage(kDebugSetupShowController, `url: ${window.location.href}`); if (navigator.userAgent.match(/Windows/)) { gOS = kOSWindows; } const b = getUrlParameter('pixelLimit'); if (b != '') { gSafeMaxPixelCount = 1024 * 1024 * parseInt(b); } if (navigator.userAgent.indexOf('deviceDesktop') != -1) { debugMessage(kDebugSetupShowController, `Device was '${gDevice}', overriding device to be 'deviceDesktop'`); gDevice = kDeviceDesktop; } if (navigator.userAgent.indexOf('deviceMobile') != -1) { debugMessage(kDebugSetupShowController, `Device was '${gDevice}', overriding device to be 'deviceMobile'`); gDevice = kDeviceMobile; } if (navigator.userAgent.indexOf('modeDesktop') != -1) { debugMessage(kDebugSetupShowController, `Mode was '${gMode}', overriding device to be 'modeDesktop'`); gMode = kModeDesktop; } if (navigator.userAgent.indexOf('modeMobile') != -1) { debugMessage(kDebugSetupShowController, `Mode was '${gMode}', overriding device to be 'modeMobile'`); gMode = kModeMobile; }debugMessage(kDebugSetupShowController, `  gDevice: ${gDevice}`); debugMessage(kDebugSetupShowController, ` gBrowser: ${gBrowser}`); debugMessage(kDebugSetupShowController, `    gMode: ${gMode}`); debugMessage(kDebugSetupShowController, `                     gOS: ${gOS}`); gShowController = new ShowController(); gShowController.displayManager.showWaitingIndicator(); gShowController.delegate.setPlaybackReadyHandler(() => { if (usePDF) { if (window.location.protocol === 'file:') { PDFJS.disableWorker = true; }PDFJS.workerSrc = './pdfjs/pdf_worker.js'; PDFJS.cMapUrl = './web/cmaps/'; PDFJS.cMapPacked = true; const c = document.createElement('canvas'); const d = c.getContext('webgl') || c.getContext('experimental-webgl'); if (!d) { useWebGL = false; } }gShowController.startShow(); }); } function extractDelegateFromUrlParameter() { let d = getUrlParameter('delegate'); let a; if ((d == '') || (d == null) || (typeof (d) === 'undefined')) { a = new NullDelegate(); } else { let c = d.indexOf('.'); a = window; while (c != -1) { const b = d.substring(0, c); a = a[b]; d = d.substring(c + 1); c = d.indexOf('.'); }a = a[d]; } return a; } var NullDelegate = Class.create({
  initialize() {}, showDidLoad() {}, showExited() { history.go(-1); }, propertyChanged(b, a) {}, setPlaybackReadyHandler(a) { a(); },
});
