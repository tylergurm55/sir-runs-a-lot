const TextureManager = Class.create({
  initialize(a) { this.script = null; this.showUrl = a; this.slideCache = {}; this.sceneDidLoadCallbackHandler = null; this.viewScale = 1; document.observe(kScriptDidDownloadEvent, (b) => { this.handleScriptDidDownloadEvent(b); }, false); },
  setSceneDidLoadCallbackHandler(a, b) { this.sceneDidLoadCallbackHandler = { handler: a, sceneIndex: b }; },
  processTextureDidLoadCallback(d, b) { if (this.sceneDidLoadCallbackHandler == null) { return; } const c = this.sceneDidLoadCallbackHandler.sceneIndex; const a = this.script.slideIndexFromSceneIndexLookup[c]; if (a != b) { return; } if (this.isSlidePreloaded(b)) { this.callSceneDidLoadCallback(); setTimeout(() => { this.destroyPDFDocument(b); }, 5000); } },
  destroyPDFDocument(c) { const b = this.slideCache[c]; if (b) { const a = b.pdf; if (a) { a.destroy(); delete this.slideCache[c].pdf; } } },
  processSlideDidLoadCallback(b) { if (this.sceneDidLoadCallbackHandler == null) { return; } const c = this.sceneDidLoadCallbackHandler.sceneIndex; const a = this.script.slideIndexFromSceneIndexLookup[c]; if (a != b) { return; } this.callSceneDidLoadCallback(); },
  processSceneDidLoadCallback(a) { if (this.sceneDidLoadCallbackHandler && a === this.sceneDidLoadCallbackHandler.sceneIndex && this.isScenePreloaded(a)) { this.callSceneDidLoadCallback(); } },
  callSceneDidLoadCallback() { this.sceneDidLoadCallbackHandler.handler(); this.sceneDidLoadCallbackHandler = null; },
  loadScene(c, a) { if (c < 0 || c > this.script.numScenes) { return; } if (a) { this.setSceneDidLoadCallbackHandler(a, c); } const b = this.script.slideIndexFromSceneIndexLookup[c]; if (usePDF) { this.requestPdfDocument(b); } else { this.requestSlideSvgmap(b); } },
  preloadScenes(a) { for (const c in a) { const b = this.script.slideIndexFromSceneIndexLookup[c]; if (b == null) { continue; } if (this.slideCache.hasOwnProperty(b) === false) { this.loadScene(c); } } },
  isSlidePreloaded(b) { let a = false; if (this.slideCache[b]) { a = true; for (const c in this.slideCache[b].textureRequests) { if (this.slideCache[b].textureRequests[c] === false) { a = false; break; } } } return a; },
  isScenePreloaded(c) { const b = this.script.slideIndexFromSceneIndexLookup[c]; const a = this.isSlidePreloaded(b); return a; },
  handleScriptDidDownloadEvent(a) { this.script = a.memo.script; this.delegate = a.memo.delegate; },
  requestPdfDocument(g) {
    if (!this.slideCache[g]) {
      this.slideCache[g] = {
        textureAssets: {}, textureRequests: {}, pdf: null, requested: false,
      };
    } const f = this.script.slideList[g]; if (!this.slideCache[g].requested) { const d = this.script.slides[f]; const i = d.assets; for (const a in i) { const e = i[a]; if (e.type === 'texture') { this.slideCache[g].textureRequests[a] = false; } } } else { if (this.isSlidePreloaded(g)) { this.processSlideDidLoadCallback(g); } return; } let b = `${this.showUrl + f}/assets/${f}.pdf`; const c = { slideId: f, slideIndex: g }; this.slideCache[g].requested = true; if (window.location.protocol === 'file:') { b += 'p'; if (window.local_pdf == null || window.local_pdf == undefined) { window.local_pdf = function (j) { this.handleRequestLocalPdfCallback(j); }.bind(this); } const h = document.createElement('script'); h.setAttribute('src', b); document.head.appendChild(h); } else { PDFJS.getDocument(b).then(this.handleRequestPdfDocumentCompleted.bind(this, c)); }
  },
  handleRequestLocalPdfCallback(b) { const a = b.slide; const d = this.script.slideList.indexOf(a); const e = atob(b.pdf); const c = { slideId: a, slideIndex: d }; PDFJS.getDocument({ data: e }).then(this.handleRequestPdfDocumentCompleted.bind(this, c)); },
  handleRequestPdfDocumentCompleted(d, b) { const i = d.slideId; const j = d.slideIndex; const f = this.script.slides[i]; const l = f.assets; this.slideCache[j].pdf = b; for (const a in l) { const h = l[a]; if (h.type !== 'texture') { continue; } const g = this.urlForTexture(a, i); const m = /(?:\.([^.]+))?$/; const c = m.exec(g)[1]; if (c.toLowerCase() === 'pdf') { const k = h.index + 1; b.getPage(k).then(this.handleRequestPdfPageCompleted.bind(this, a, j)); } else { const e = new Image(); Event.observe(e, 'load', this.handleImageOnloadEvent.bind(this, a, j)); e.src = g; } } },
  handleRequestPdfPageCompleted(a, i, h) { const g = h.getViewport(pdfScaleFactor); const d = document.createElement('canvas'); const c = d.getContext('2d'); d.height = g.height; d.width = g.width; const e = { canvasContext: c, background: 'rgba(0, 0, 0, 0)', viewport: g }; const f = this; const b = h.render(e); const j = b._internalRenderTask.callback; b._internalRenderTask.callback = function (k) { j.call(this, k); f.slideCache[i].textureAssets[a] = d; f.slideCache[i].textureRequests[a] = true; f.processTextureDidLoadCallback(a, i); }; },
  requestSlideSvgmap(g) { if (!this.slideCache[g]) { this.slideCache[g] = {}; this.slideCache[g].textureAssets = {}; this.slideCache[g].textureRequests = {}; } const f = this.script.slideList[g]; if (!this.slideCache[g].svgmap) { const d = this.script.slides[f]; const i = d.assets; for (const a in i) { const e = i[a]; if (e.type === 'texture') { this.slideCache[g].textureRequests[a] = false; } } } else { if (this.isSlidePreloaded(g)) { this.processSlideDidLoadCallback(g); } return; } let c = `${this.showUrl + f}/assets/${f}.svgmap`; if (window.location.protocol === 'file:') { c += 'p'; if (window.svgmap == null || window.svgmap == undefined) { window.svgmap = this.handleRequestSlideSvgmapCompleted.bind(this, null, true); } const h = document.createElement('script'); h.setAttribute('src', c); document.head.appendChild(h); } else { const b = { slideId: f, slideIndex: g }; new Ajax.Request(c, { method: 'get', onSuccess: this.handleRequestSlideSvgmapCompleted.bind(this, b, false) }); } },
  handleRequestSlideSvgmapCompleted(n, l, f) { let d; let a; if (l) { d = f.slide; a = f.svg; } else { d = n.slideId; a = JSON.parse(f.responseText); } const o = this.script.slideList.indexOf(d); const b = this.script.slides[d]; const e = b.assets; this.slideCache[o].svgmap = a; for (const r in e) { const j = e[r]; if (j.type !== 'texture') { continue; } const h = this.urlForTexture(r, d); const m = h.split('/'); const g = m.length; const c = m[g - 1]; const p = c.split('.'); const i = p[p.length - 1]; if (i === 'svgmap') { const k = a[j.index]; var n = { textureId: r, slideId: d, slideIndex: o }; this.handleFetchCompleted(n, k); } else { const q = new Image(); Event.observe(q, 'load', this.handleImageOnloadEvent.bind(this, r, o)); q.src = h; } } },
  handleFetchCompleted(q, k) { const a = this.viewScale; const s = q.textureId; const b = q.slideId; const r = q.slideIndex; const c = new DOMParser(); const l = `${this.showUrl + b}/assets/`; const h = c.parseFromString(k, 'text/xml'); const g = h.documentElement.getAttribute('viewBox').split(' '); const f = g[2]; const m = g[3]; const d = h.getElementsByTagName('image'); for (let n = 0, e = d.length; n < e; n++) { const p = d[n]; const o = p.getAttributeNS('http://www.w3.org/1999/xlink', 'href'); p.setAttributeNS('http://www.w3.org/1999/xlink', 'href', l + o); } const j = document.importNode(h.documentElement, true); j.setAttributeNS('http://www.w3.org/2000/svg', 'width', f); j.setAttributeNS('http://www.w3.org/2000/svg', 'height', m); this.slideCache[r].textureAssets[s] = j; this.slideCache[r].textureRequests[s] = true; this.processTextureDidLoadCallback(s, r); },
  handleImageOnloadEvent(d, c, b) { b = b || window.event; const a = b.target || b.srcElement; this.slideCache[c].textureAssets[d] = a; this.slideCache[c].textureRequests[d] = true; this.processTextureDidLoadCallback(d, c); },
  getTextureObject(d, c) { let a; const b = this.script.slideIndexFromSceneIndexLookup[d]; if (this.slideCache[b]) { a = this.slideCache[b].textureAssets[c]; } return a; },
  getTextureInfo(e, d) { const c = this.script.slideIndexFromSceneIndexLookup[e]; if (c == null) { return null; } const a = this.script.slideList[c]; const b = this.script.slides[a].assets[d]; return b; },
  getTextureUrl(d, c) { const b = this.script.slideIndexFromSceneIndexLookup[d]; if (b == null) { return null; } const a = this.script.slideList[b]; return this.urlForTexture(c, a); },
  getMovieUrl(d, c) { const b = this.script.slideIndexFromSceneIndexLookup[d]; if (b == null) { return null; } const a = this.script.slideList[b]; return this.urlForAsset(c, a); },
  urlForAsset(e, c) { let b = ''; const d = this.script.slides[c].assets[e]; if (d == null) { return b; } let a; if (usePDF) { a = d.url.native; } else { a = d.url.web; } if ((a != null) && (a != '')) { if (a.toLowerCase().substring(0, 4) === 'http') { b = a; } else { b = this.showUrl + (c ? `${c}/` : '') + a; } } return b; },
  urlForTexture(b, a) { return this.generateUrl(b, a, false); },
  generateUrl(e, b) { let a = ''; let c = ''; const d = this.script.slides[b].assets[e]; if (!d) { return a; } if (usePDF) { c = d.url.native; } else { c = d.url.web; } if ((c != null) && (c != '')) { if (c.toLowerCase().substring(0, 4) === 'http') { a = c; } else { a = this.showUrl + (b ? `${b}/` : '') + c; } } return a; },
});
